{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9487dbe2-b2d7-4e61-a916-60942d26348f",
   "metadata": {},
   "outputs": [],
   "source": [
    "import ast\n",
    "\n",
    "import cv2\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "\n",
    "def draw_border(img, top_left, bottom_right, color=(0, 255, 0), thickness=10, line_length_x=200, line_length_y=200):\n",
    "    x1, y1 = top_left\n",
    "    x2, y2 = bottom_right\n",
    "\n",
    "    cv2.line(img, (x1, y1), (x1, y1 + line_length_y), color, thickness)  #-- top-left\n",
    "    cv2.line(img, (x1, y1), (x1 + line_length_x, y1), color, thickness)\n",
    "\n",
    "    cv2.line(img, (x1, y2), (x1, y2 - line_length_y), color, thickness)  #-- bottom-left\n",
    "    cv2.line(img, (x1, y2), (x1 + line_length_x, y2), color, thickness)\n",
    "\n",
    "    cv2.line(img, (x2, y1), (x2 - line_length_x, y1), color, thickness)  #-- top-right\n",
    "    cv2.line(img, (x2, y1), (x2, y1 + line_length_y), color, thickness)\n",
    "\n",
    "    cv2.line(img, (x2, y2), (x2, y2 - line_length_y), color, thickness)  #-- bottom-right\n",
    "    cv2.line(img, (x2, y2), (x2 - line_length_x, y2), color, thickness)\n",
    "\n",
    "    return img\n",
    "\n",
    "\n",
    "results = pd.read_csv('./test_interpolated.csv')\n",
    "\n",
    "# load video\n",
    "video_path = 'sample.mp4'\n",
    "cap = cv2.VideoCapture(video_path)\n",
    "\n",
    "fourcc = cv2.VideoWriter_fourcc(*'mp4v')  # Specify the codec\n",
    "fps = cap.get(cv2.CAP_PROP_FPS)\n",
    "width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))\n",
    "height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))\n",
    "out = cv2.VideoWriter('./out.mp4', fourcc, fps, (width, height))\n",
    "\n",
    "license_plate = {}\n",
    "for car_id in np.unique(results['car_id']):\n",
    "    max_ = np.amax(results[results['car_id'] == car_id]['license_number_score'])\n",
    "    license_plate[car_id] = {'license_crop': None,\n",
    "                             'license_plate_number': results[(results['car_id'] == car_id) &\n",
    "                                                             (results['license_number_score'] == max_)]['license_number'].iloc[0]}\n",
    "    cap.set(cv2.CAP_PROP_POS_FRAMES, results[(results['car_id'] == car_id) &\n",
    "                                             (results['license_number_score'] == max_)]['frame_nmr'].iloc[0])\n",
    "    ret, frame = cap.read()\n",
    "\n",
    "    x1, y1, x2, y2 = ast.literal_eval(results[(results['car_id'] == car_id) &\n",
    "                                              (results['license_number_score'] == max_)]['license_plate_bbox'].iloc[0].replace('[ ', '[').replace('   ', ' ').replace('  ', ' ').replace(' ', ','))\n",
    "\n",
    "    license_crop = frame[int(y1):int(y2), int(x1):int(x2), :]\n",
    "    license_crop = cv2.resize(license_crop, (int((x2 - x1) * 400 / (y2 - y1)), 400))\n",
    "\n",
    "    license_plate[car_id]['license_crop'] = license_crop\n",
    "\n",
    "\n",
    "frame_nmr = -1\n",
    "\n",
    "cap.set(cv2.CAP_PROP_POS_FRAMES, 0)\n",
    "\n",
    "# read frames\n",
    "ret = True\n",
    "while ret:\n",
    "    ret, frame = cap.read()\n",
    "    frame_nmr += 1\n",
    "    if ret:\n",
    "        df_ = results[results['frame_nmr'] == frame_nmr]\n",
    "        for row_indx in range(len(df_)):\n",
    "            # draw car\n",
    "            car_x1, car_y1, car_x2, car_y2 = ast.literal_eval(df_.iloc[row_indx]['car_bbox'].replace('[ ', '[').replace('   ', ' ').replace('  ', ' ').replace(' ', ','))\n",
    "            draw_border(frame, (int(car_x1), int(car_y1)), (int(car_x2), int(car_y2)), (0, 255, 0), 25,\n",
    "                        line_length_x=200, line_length_y=200)\n",
    "\n",
    "            # draw license plate\n",
    "            x1, y1, x2, y2 = ast.literal_eval(df_.iloc[row_indx]['license_plate_bbox'].replace('[ ', '[').replace('   ', ' ').replace('  ', ' ').replace(' ', ','))\n",
    "            cv2.rectangle(frame, (int(x1), int(y1)), (int(x2), int(y2)), (0, 0, 255), 12)\n",
    "\n",
    "            # crop license plate\n",
    "            license_crop = license_plate[df_.iloc[row_indx]['car_id']]['license_crop']\n",
    "\n",
    "            H, W, _ = license_crop.shape\n",
    "\n",
    "            try:\n",
    "                frame[int(car_y1) - H - 100:int(car_y1) - 100,\n",
    "                      int((car_x2 + car_x1 - W) / 2):int((car_x2 + car_x1 + W) / 2), :] = license_crop\n",
    "\n",
    "                frame[int(car_y1) - H - 400:int(car_y1) - H - 100,\n",
    "                      int((car_x2 + car_x1 - W) / 2):int((car_x2 + car_x1 + W) / 2), :] = (255, 255, 255)\n",
    "\n",
    "                (text_width, text_height), _ = cv2.getTextSize(\n",
    "                    license_plate[df_.iloc[row_indx]['car_id']]['license_plate_number'],\n",
    "                    cv2.FONT_HERSHEY_SIMPLEX,\n",
    "                    4.3,\n",
    "                    17)\n",
    "\n",
    "                cv2.putText(frame,\n",
    "                            license_plate[df_.iloc[row_indx]['car_id']]['license_plate_number'],\n",
    "                            (int((car_x2 + car_x1 - text_width) / 2), int(car_y1 - H - 250 + (text_height / 2))),\n",
    "                            cv2.FONT_HERSHEY_SIMPLEX,\n",
    "                            4.3,\n",
    "                            (0, 0, 0),\n",
    "                            17)\n",
    "\n",
    "            except:\n",
    "                pass\n",
    "\n",
    "        out.write(frame)\n",
    "        frame = cv2.resize(frame, (1280, 720))\n",
    "\n",
    "        # cv2.imshow('frame', frame)\n",
    "        # cv2.waitKey(0)\n",
    "\n",
    "out.release()\n",
    "cap.release()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
